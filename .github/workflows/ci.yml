name: Build

on:
  push:
  schedule:
    - cron:  '1 0 * * 1'    # Mondays at 00:01

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        configuration: [Debug, Release]
        os: [ubuntu-latest, windows-latest, macOS-latest]
        include:
          - os: ubuntu-latest
            runtime-identifier: linux-x64
          - os: windows-latest
            runtime-identifier: win-x64
          - os: macOS-latest
            runtime-identifier: osx-x64
      fail-fast: false

    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      PROJECT_NAME: Lynx

    steps:
    - uses: actions/checkout@v2

    - name: Inject slug/short variables
      uses: rlespinasse/github-slug-action@v3.x

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0.100-rc.2.21505.57'
        include-prerelease: true

    - name: Build
      run: dotnet build -c ${{ matrix.configuration }}

    - name: Run CI tests
      run: dotnet test -c ${{ matrix.configuration }} --no-build --collect:"XPlat Code Coverage"

    - name: '[Ubuntu] Generate test coverage report'
      if: matrix.os == 'ubuntu-latest' && matrix.configuration == 'Release'
      uses: danielpalme/ReportGenerator-GitHub-Action@4.8.12
      with:
        reports: 'tests/**/*.cobertura.xml'
        targetdir: 'coveragereport'
        reporttypes: 'HtmlInline_AzurePipelines_Dark;SonarQube;Cobertura'
        assemblyfilters: '+*'
        classfilters: '+*;-*Exception;-*ConstantGenerator;-*MagicNumberGenerator'
        filefilters: '+*'
        verbosity: 'Info'
        title: '${{ env.PROJECT_NAME }} #${{ github.run_number }} (${{ env.GITHUB_REF_SLUG }})'
        tag: '${{ github.run_number }}_${{ github.run_id }}'
        customSettings: 'numberOfReportsParsedInParallel=3;numberOfReportsMergedInParallel=3'

    - name: '[Ubuntu] Upload test coverage report'
      if: matrix.os == 'ubuntu-latest' && matrix.configuration == 'Release'
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PROJECT_NAME }}-coverage-ci-${{ github.run_number }}
        path: coveragereport/
        if-no-files-found: error

    - name: Publish
      if: matrix.configuration == 'Release'
      run: dotnet publish src/Lynx.Cli/Lynx.Cli.csproj -c Release --runtime ${{ matrix.runtime-identifier }} --self-contained /p:Optimized=true -o artifacts/${{ matrix.runtime-identifier }}

    - name: Upload Lynx-${{ env.GITHUB_REF_SLUG }}-${{ github.run_number }}-${{ matrix.runtime-identifier }} artifact
      if: matrix.configuration == 'Release'
      uses: actions/upload-artifact@v2
      with:
        name: Lynx-${{ env.GITHUB_REF_SLUG }}-${{ github.run_number }}-${{ matrix.runtime-identifier }}
        path: |
          artifacts/${{ matrix.runtime-identifier }}/
          !artifacts/**/*.pdb
        if-no-files-found: error

  long-running-tests:
    needs: build

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
      fail-fast: false

    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      PROJECT_NAME: Lynx

    steps:
    - uses: actions/checkout@v2

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0.100-rc.2.21505.57'
        include-prerelease: true

    - name: Build
      run: dotnet build -c Release

    - name: Run long-running tests
      run: dotnet test -c Release --no-build -v=normal --filter "TestCategory=LongRunning" # --collect:"XPlat Code Coverage"

    #- name: Run non-parallelizable tests
    #  run: dotnet test -c Release --no-build -v=normal --filter "TestCategory=NonParallelizable"  # --collect:"XPlat Code Coverage"

    # Merging code coverage: Coverlet issue https://github.com/coverlet-coverage/coverlet/issues/1192

    #- uses: actions/download-artifact@v2
    #  if: matrix.os == 'ubuntu-latest'
    #  with:
    #    name: ${{ env.PROJECT_NAME }}-coverage-ci-${{ github.run_number }}
    #    path: artifacts/partial-coverage/

    #- name: '[Ubuntu] Generate test coverage report'
    #  if: matrix.os == 'ubuntu-latest'
    #  uses: danielpalme/ReportGenerator-GitHub-Action@4.8.12
    #  with:
    #    reports: 'artifacts/partial-coverage/**/*.cobertura.xml;tests/**/*.cobertura.xml'
    #    targetdir: 'coveragereport'
    #    reporttypes: 'HtmlInline_AzurePipelines_Dark;SonarQube;Cobertura'
    #    assemblyfilters: '+*'
    #    classfilters: '+*;-*Exception;-*ConstantGenerator;-*MagicNumberGenerator'
    #    filefilters: '+*'
    #    verbosity: 'Info'
    #    title: '${{ env.PROJECT_NAME }} #${{ github.run_number }} (${{ env.GITHUB_REF_SLUG }})'
    #    tag: '${{ github.run_number }}_${{ github.run_id }}'
    #    customSettings: 'numberOfReportsParsedInParallel=3;numberOfReportsMergedInParallel=3'

    #- name: '[Ubuntu] Upload test coverage report'
    #  if: matrix.os == 'ubuntu-latest'
    #  uses: actions/upload-artifact@v2
    #  with:
    #    name: ${{ env.PROJECT_NAME }}-coverage-ci-${{ github.run_number }}
    #    path: coveragereport/
    #    if-no-files-found: error
